{"version":3,"sources":["../../src/memoryfs.js"],"names":["MemoryFs","root","data","filePath","path","isAbsolute","join","resolve","dirname","module","parent","filename","target","slash","relative","out","Error","somePath","replace","idlFs","__dirname","ThriftData"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;IAEaA,Q,WAAAA,Q;AAGX,oBAAYC,IAAZ,EAA0BC,IAA1B,EAAwC;AAAA;;AACtC,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;;;iCAEYC,Q,EAAkB;AAC7B,UAAI,CAACC,eAAKC,UAAL,CAAgBF,QAAhB,CAAL,EAAgC;AAC9BA,mBAAWC,eAAKE,IAAL,CAAUF,eAAKG,OAAL,CAAaH,eAAKI,OAAL,CAAaC,OAAOC,MAAP,CAAcC,QAA3B,CAAb,CAAV,EAA8DR,QAA9D,CAAX;AACD;;AAED,UAAMS,SAASC,MAAMT,eAAKU,QAAL,CAAc,KAAKb,IAAnB,EAAyBE,QAAzB,CAAN,CAAf;AACA,UAAMY,MAAM,KAAKb,IAAL,CAAUU,MAAV,CAAZ;AACA,UAAI,CAACG,GAAL,EAAU;AACR,cAAM,IAAIC,KAAJ,4BACqBJ,MADrB,+CACqET,QADrE,qBAEF,KAAKF,IAFH,CAAN;AAKD;AACD,aAAOc,GAAP;AACD;;;;;;AAGH;;;AACA,SAASF,KAAT,CAAeI,QAAf,EAAyB;AACvB,SAAOA,SAASC,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAP;AACD;;AAED,IAAMC,QAAQ,IAAInB,QAAJ,CAAaoB,SAAb,EAAwBC,gBAAxB,CAAd;;kBAEeF,K","file":"memoryfs.js","sourcesContent":["import path from 'path';\nimport ThriftData from './generated/thrift';\n\nexport class MemoryFs {\n  data: object;\n  root: string;\n  constructor(root: string, data: object) {\n    this.root = root;\n    this.data = data;\n  }\n\n  readFileSync(filePath: string) {\n    if (!path.isAbsolute(filePath)) {\n      filePath = path.join(path.resolve(path.dirname(module.parent.filename)), filePath);\n    }\n\n    const target = slash(path.relative(this.root, filePath));\n    const out = this.data[target];\n    if (!out) {\n      throw new Error(\n        `The path resolved to \"${target}\" was not found in MemoryFs.\\nfilePath=${filePath}\\nthis.root=\"${\n          this.root\n        }`\n      );\n    }\n    return out;\n  }\n}\n\n// ensure windows paths are stored consistently in the cache\nfunction slash(somePath) {\n  return somePath.replace(/\\\\/g, '/');\n}\n\nconst idlFs = new MemoryFs(__dirname, ThriftData);\n\nexport default idlFs;\n"]}