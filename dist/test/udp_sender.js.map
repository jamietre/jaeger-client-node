{"version":3,"sources":["../../test/udp_sender.js"],"names":["PORT","createUdpSenderTest","name","host","socketType","options","describe","server","tracer","thrift","sender","assertThriftSpanEqual","assert","spanOne","spanTwo","deepEqual","traceIdLow","traceIdHigh","spanId","parentSpanId","equal","operationName","references","flags","startTime","duration","beforeEach","dgram","createSocket","bind","reporter","InMemoryReporter","Tracer","ConstSampler","UDPSender","setProcess","_process","Thrift","fs","entryPoint","path","join","__dirname","allowOptionalArguments","allowFilesystemAccess","afterEach","close","assertCallback","expectedNumSpans","expectedError","numSpans","error","it","startSpan","finish","ThriftUtils","spanToThrift","maxSpanBytes","_calcSpanSize","length","_maxSpanBytes","on","msg","remote","thriftObj","Agent","emitBatch","argumentsMessageRW","readFrom","batch","value","body","spans","process","serviceName","actualTags","_","sortBy","tags","o","key","done","append","undefined","flush","parentContext","context","childOfContext","childOfRef","opentracing","Reference","REFERENCE_CHILD_OF","followsFromContext","followsFromRef","REFERENCE_FOLLOWS_FROM","childOf","expectedTraceId","expectedParentId","traceId","parentId","each","span","tSpan","isUndefined","spanSize","_batch","_totalSpanBytes","spanThatExceedsCapacity","setTag","largeSpanSize","err","to","have","string","_logger","ERROR_RE","timeout","RemoteReporter","_host","expectLogs","semver","satisfies","version","info","console","log","isTrue","match"],"mappings":"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","file":"udp_sender.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport _ from 'lodash';\nimport { assert, expect } from 'chai';\nimport ConstSampler from '../src/samplers/const_sampler.js';\nimport dgram from 'dgram';\nimport fs from '../src/memoryfs';\nimport path from 'path';\nimport semver from 'semver';\nimport InMemoryReporter from '../src/reporters/in_memory_reporter.js';\nimport RemoteReporter from '../src/reporters/remote_reporter.js';\nimport opentracing from 'opentracing';\nimport Tracer from '../src/tracer.js';\nimport { Thrift } from 'thriftrw';\nimport ThriftUtils from '../src/thrift.js';\nimport UDPSender from '../src/reporters/udp_sender.js';\n\nconst PORT = 6832;\n\ncreateUdpSenderTest({\n  name: 'udp4 sender',\n  host: '127.0.0.1',\n  socketType: 'udp4',\n});\n\ncreateUdpSenderTest({\n  name: 'udp6 sender',\n  host: '::1',\n  socketType: 'udp6',\n});\n\nfunction createUdpSenderTest(options) {\n  describe(options.name, () => {\n    let server;\n    let tracer;\n    let thrift;\n    let sender;\n\n    function assertThriftSpanEqual(assert, spanOne, spanTwo) {\n      assert.deepEqual(spanOne.traceIdLow, spanTwo.traceIdLow);\n      assert.deepEqual(spanOne.traceIdHigh, spanTwo.traceIdHigh);\n      assert.deepEqual(spanOne.spanId, spanTwo.spanId);\n      assert.deepEqual(spanOne.parentSpanId, spanTwo.parentSpanId);\n      assert.equal(spanOne.operationName, spanTwo.operationName);\n      assert.deepEqual(spanOne.references, spanTwo.references);\n      assert.equal(spanOne.flags, spanTwo.flags);\n      assert.deepEqual(spanOne.startTime, spanTwo.startTime);\n      assert.deepEqual(spanOne.duration, spanTwo.duration);\n    }\n\n    beforeEach(() => {\n      server = dgram.createSocket(options.socketType);\n      server.bind(PORT, options.host);\n      let reporter = new InMemoryReporter();\n      tracer = new Tracer('test-service-name', reporter, new ConstSampler(true));\n      sender = new UDPSender({ host: options.host, socketType: options.socketType });\n      sender.setProcess(reporter._process);\n      thrift = new Thrift({\n        fs,\n        entryPoint: path.join(__dirname, '../src/thriftrw-idl/agent.thrift'),\n        allowOptionalArguments: true,\n        allowFilesystemAccess: true,\n      });\n    });\n\n    afterEach(() => {\n      tracer.close();\n      server.close();\n    });\n\n    function assertCallback(expectedNumSpans, expectedError): SenderCallback {\n      return (numSpans, error) => {\n        assert.equal(numSpans, expectedNumSpans);\n        assert.equal(error, expectedError);\n      };\n    }\n\n    it('should read and verify spans and process sent', done => {\n      let spanOne = tracer.startSpan('operation-one');\n      spanOne.finish(); // finish to set span duration\n      spanOne = ThriftUtils.spanToThrift(spanOne);\n      let spanTwo = tracer.startSpan('operation-two');\n      spanTwo.finish(); // finish to set span duration\n      spanTwo = ThriftUtils.spanToThrift(spanTwo);\n\n      // make sure sender can fit both spans\n      let maxSpanBytes = sender._calcSpanSize(spanOne).length + sender._calcSpanSize(spanTwo).length + 30;\n      sender._maxSpanBytes = maxSpanBytes;\n\n      server.on('message', (msg, remote) => {\n        let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n        let batch = thriftObj.value.body.batch;\n        assert.equal(batch.spans.length, 2);\n\n        assertThriftSpanEqual(assert, spanOne, batch.spans[0]);\n        assertThriftSpanEqual(assert, spanTwo, batch.spans[1]);\n\n        assert.equal(batch.process.serviceName, 'test-service-name');\n        let actualTags = _.sortBy(batch.process.tags, o => {\n          return o.key;\n        });\n        assert.equal(actualTags.length, 4);\n        assert.equal(actualTags[0].key, 'client-uuid');\n        assert.equal(actualTags[1].key, 'hostname');\n        assert.equal(actualTags[2].key, 'ip');\n        assert.equal(actualTags[3].key, 'jaeger.version');\n\n        sender.close();\n        done();\n      });\n\n      sender.append(spanOne, assertCallback(0, undefined));\n      sender.append(spanTwo, assertCallback(0, undefined));\n      sender.flush(assertCallback(2, undefined));\n    });\n\n    describe('span reference tests', () => {\n      let tracer = new Tracer('test-service-name', new InMemoryReporter(), new ConstSampler(true));\n      let parentContext = tracer.startSpan('just-used-for-context').context();\n      let childOfContext = tracer.startSpan('just-used-for-context').context();\n      let childOfRef = new opentracing.Reference(opentracing.REFERENCE_CHILD_OF, childOfContext);\n      let followsFromContext = tracer.startSpan('just-used-for-context').context();\n      let followsFromRef = new opentracing.Reference(opentracing.REFERENCE_FOLLOWS_FROM, followsFromContext);\n\n      let options = [\n        { childOf: null, references: [], expectedTraceId: null, expectedParentId: null },\n        {\n          childOf: null,\n          references: [childOfRef, followsFromRef],\n          expectedTraceId: childOfContext.traceId,\n          expectedParentId: childOfContext.parentId,\n        },\n      ];\n\n      _.each(options, o => {\n        it('should serialize span references', done => {\n          let span = tracer.startSpan('bender', {\n            childOf: o.childOf,\n            references: o.references,\n          });\n          span.finish();\n          const tSpan = ThriftUtils.spanToThrift(span);\n\n          server.on('message', function(msg, remote) {\n            let thriftObj = thrift.Agent.emitBatch.argumentsMessageRW.readFrom(msg, 0);\n            let batch = thriftObj.value.body.batch;\n\n            assertThriftSpanEqual(assert, tSpan, batch.spans[0]);\n            if (o.expectedTraceId) {\n              assert.deepEqual(batch.spans[0].traceIdLow, o.expectedTraceId);\n            }\n\n            if (o.expectedParentId) {\n              assert.deepEqual(batch.spans[0].parentId, o.expectedParentId);\n            } else {\n              assert.isUndefined(batch.spans[0].parentId);\n            }\n\n            sender.close();\n            done();\n          });\n\n          sender.append(tSpan);\n          sender.flush();\n        });\n      });\n    });\n\n    it('should flush spans when capacity is reached', () => {\n      let spanOne = tracer.startSpan('operation-one');\n      spanOne.finish(); // finish to set span duration\n      spanOne = ThriftUtils.spanToThrift(spanOne);\n      let spanSize = sender._calcSpanSize(spanOne).length;\n      sender._maxSpanBytes = spanSize * 2;\n\n      sender.append(spanOne, assertCallback(0, undefined));\n      sender.append(spanOne, assertCallback(2, undefined));\n\n      assert.equal(sender._batch.spans.length, 0);\n      assert.equal(sender._totalSpanBytes, 0);\n    });\n\n    it('should flush spans when just over capacity', done => {\n      let spanOne = tracer.startSpan('operation-one');\n      spanOne.finish(); // finish to set span duration\n      spanOne = ThriftUtils.spanToThrift(spanOne);\n      let spanSize = sender._calcSpanSize(spanOne).length;\n      sender._maxSpanBytes = spanSize * 2;\n\n      let spanThatExceedsCapacity = tracer.startSpan('bigger-span');\n      spanThatExceedsCapacity.setTag('some-key', 'some-value');\n      spanThatExceedsCapacity.finish(); // finish to set span duration\n      spanThatExceedsCapacity = ThriftUtils.spanToThrift(spanThatExceedsCapacity);\n      let largeSpanSize = sender._calcSpanSize(spanThatExceedsCapacity).length;\n\n      sender.append(spanOne, assertCallback(0, undefined));\n      sender.append(spanThatExceedsCapacity, (numSpans, error) => {\n        assert.equal(numSpans, 1);\n        assert.equal(error, undefined);\n\n        assert.equal(sender._batch.spans.length, 1);\n        assert.equal(sender._totalSpanBytes, largeSpanSize);\n        done();\n      });\n    });\n\n    it('should returns error from flush() on failed buffer conversion', done => {\n      let span = tracer.startSpan('leela');\n      span.finish(); // finish to set span duration\n      span = ThriftUtils.spanToThrift(span);\n      span.flags = 'string'; // malform the span to create a serialization error\n      sender.append(span);\n      sender.flush((numSpans, err) => {\n        assert.equal(numSpans, 1);\n        expect(err).to.have.string('error writing Thrift object:');\n        done();\n      });\n    });\n\n    it('should return error upon thrift conversion failure', done => {\n      sender._logger = {\n        error: msg => {\n          expect(msg).to.have.string('error converting span to Thrift:');\n          done();\n        },\n      };\n      let span = tracer.startSpan(undefined);\n      span.finish();\n\n      sender.append(ThriftUtils.spanToThrift(span), (numSpans, err) => {\n        assert.equal(numSpans, 1);\n        expect(err).to.have.string('error converting span to Thrift:');\n        done();\n      });\n    });\n\n    it('should return error on span too large', done => {\n      let span = tracer.startSpan('op-name');\n      span.finish(); // otherwise duration will be undefined\n\n      sender._maxSpanBytes = 1;\n      sender.append(ThriftUtils.spanToThrift(span), (numSpans, err) => {\n        assert.equal(numSpans, 1);\n        expect(err).to.have.string('is larger than maxSpanSize');\n        done();\n      });\n    });\n\n    it('should return 0,undefined on flush() with no spans', () => {\n      sender.flush(assertCallback(0, undefined));\n    });\n\n    it('should gracefully handle errors emitted by socket.send', function(done) {\n      // EAI_AGAIN - nodejs received invalid DNS response. E.g. resolver doesn't support IPv6.\n      // ENOTFOUND - nodejs received valid DNS response but domain not found\n      // ESRCH - nodejs v0.10 error\n      const ERROR_RE = /error sending spans over UDP: Error: getaddrinfo (EAI_AGAIN|ENOTFOUND|ESRCH)/;\n\n      // this test tends to timeout\n      this.timeout(15000);\n      let tracer = new Tracer('test-service-name', new RemoteReporter(sender), new ConstSampler(true));\n      sender._host = 'foo.bar.xyz';\n      // In Node 0.10 and 0.12 the error is logged twice: (1) from inline callback, (2) from on('error') handler.\n      let expectLogs = semver.satisfies(process.version, '0.10.x || 0.12.x');\n      sender._logger = {\n        info: msg => {\n          console.log('sender info: ' + msg);\n        },\n        error: msg => {\n          assert.isTrue(expectLogs);\n          expect(msg).to.match(ERROR_RE);\n          tracer.close(done);\n        },\n      };\n      tracer.startSpan('testSpan').finish();\n      sender.flush((numSpans, err) => {\n        assert.equal(numSpans, 1);\n        expect(err).to.match(ERROR_RE);\n        if (!expectLogs) {\n          tracer.close(done);\n        }\n      });\n    }).timeout(5000);\n  });\n}\n"]}