{"version":3,"sources":["../../test/memoryfs.js"],"names":["describe","it","root","process","cwd","fs","MemoryFs","assert","equal","readFileSync","throws","path","resolve"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,UAAT,EAAqB,YAAM;AACzBC,KAAG,QAAH,EAAa,YAAM;AACjB,QAAMC,OAAOC,QAAQC,GAAR,EAAb;AACA,QAAMC,KAAK,IAAIC,kBAAJ,CAAaJ,IAAb,EAAmB;AAC5B,iBAAW,KADiB;AAE5B,sBAAgB;AAFY,KAAnB,CAAX;AAIAK,qBAAOC,KAAP,CAAaH,GAAGI,YAAH,CAAmBP,IAAnB,cAAb,EAAiD,KAAjD;AACAK,qBAAOC,KAAP,CAAaH,GAAGI,YAAH,CAAmBP,IAAnB,mBAAb,EAAsD,MAAtD;AACD,GARD;AASAD,KAAG,0BAAH,EAA+B,YAAM;AACnC,QAAMC,OAAOC,QAAQC,GAAR,EAAb;AACA,QAAMC,KAAK,IAAIC,kBAAJ,CAAaJ,IAAb,EAAmB,EAAnB,CAAX;AACAK,qBAAOG,MAAP,CAAc,YAAM;AAClBL,SAAGI,YAAH,CAAmBP,IAAnB;AACD,KAFD;AAGD,GAND;AAOAD,KAAG,eAAH,EAAoB,YAAM;AACxB,QAAMC,OAAOS,eAAKC,OAAL,CAAgBT,QAAQC,GAAR,EAAhB,UAAb;AACA,QAAMC,KAAK,IAAIC,kBAAJ,CAAaJ,IAAb,EAAmB;AAC5B,iBAAW;AADiB,KAAnB,CAAX;AAGAK,qBAAOC,KAAP,CAAaH,GAAGI,YAAH,CAAgB,YAAhB,CAAb,EAA4C,KAA5C;AACD,GAND;AAOD,CAxBD","file":"memoryfs.js","sourcesContent":["import { MemoryFs } from '../src/memoryfs';\r\nimport path from 'path';\r\nimport assert from 'assert';\r\n\r\ndescribe('memoryfs', () => {\r\n  it('simple', () => {\r\n    const root = process.cwd();\r\n    const fs = new MemoryFs(root, {\r\n      'foo.txt': 'bar',\r\n      'baz/foo2.txt': 'fizz',\r\n    });\r\n    assert.equal(fs.readFileSync(`${root}/foo.txt`), 'bar');\r\n    assert.equal(fs.readFileSync(`${root}/baz/foo2.txt`), 'fizz');\r\n  });\r\n  it('fails if file is missing', () => {\r\n    const root = process.cwd();\r\n    const fs = new MemoryFs(root, {});\r\n    assert.throws(() => {\r\n      fs.readFileSync(`${root}/foo.txt`);\r\n    });\r\n  });\r\n  it('relative path', () => {\r\n    const root = path.resolve(`${process.cwd()}/../`);\r\n    const fs = new MemoryFs(root, {\r\n      'foo.txt': 'bar',\r\n    });\r\n    assert.equal(fs.readFileSync('../foo.txt'), 'bar');\r\n  });\r\n});\r\n"]}