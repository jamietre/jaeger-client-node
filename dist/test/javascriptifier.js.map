{"version":3,"sources":["../../test/javascriptifier.js"],"names":["sequence","setUpNestedScenario","dirCount","filesPerDir","dirs","map","i","forEach","fs","mkdirSync","mockRoot","dir","files","fileName","filePath","writeFileSync","flatten","describe","beforeEach","afterEach","mockfs","restore","it","fileNames","sort","specs","assert","deepEqual","e","relativePath","data","expectedFilePaths","actualFilePaths","outfile","generatedFile","readFileSync","generated","eval","allKeys","Object","keys","equal","items","out","Array","isArray","item","push","n"],"mappings":"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","file":"javascriptifier.js","sourcesContent":["import { readAllFilesRecursively, convertFilesToJavascript } from '../scripts/lib/javascriptifier';\nimport fs from 'fs';\nimport mockfs from 'mock-fs';\nimport uuid from 'uuid/v4';\nimport assert from 'assert';\n\nfunction setUpNestedScenario(dirCount: number, filesPerDir: number): string[] {\n  const dirs = sequence(dirCount).map(i => `dir-${i}`);\n  dirs.forEach(dir => fs.mkdirSync(`${mockRoot}/${dir}`));\n  const files = ['', ...dirs].map(dir => {\n    return sequence(filesPerDir).map(i => {\n      const fileName = `file-${i}.tst`;\n      const filePath = dir ? `${dir}/${fileName}` : fileName;\n      fs.writeFileSync(`${mockRoot}/${filePath}`, `data-${i}-line-1\\ndata-${i}-line-2`);\n      return filePath;\n    });\n  });\n  return flatten(files);\n}\n\n// sanity check to make sure fs is really mocked\nconst mockRoot = `/${uuid()}`;\n\ndescribe('readAllFilesRecursively', () => {\n  beforeEach(() => mockfs({ [mockRoot]: {} }));\n  afterEach(() => mockfs.restore());\n\n  it('works with no subdirectories', () => {\n    const fileNames = sequence(5)\n      .map(i => {\n        const fileName = `test-file-${i}.tst`;\n        fs.writeFileSync(`${mockRoot}/${fileName}`, `test-data-${i}`);\n        return fileName;\n      })\n      .sort();\n\n    const specs = readAllFilesRecursively(mockRoot);\n\n    assert.deepEqual(specs.map(e => e.relativePath).sort(), fileNames, 'file paths match');\n    assert.deepEqual(specs.map(e => e.data), sequence(5).map(i => `test-data-${i}`), 'data matches');\n  });\n\n  it('works with subdirectories', () => {\n    const expectedFilePaths = setUpNestedScenario(2, 5).sort();\n    const specs = readAllFilesRecursively(mockRoot);\n\n    const actualFilePaths = specs.map(e => e.relativePath).sort();\n\n    assert.deepEqual(\n      expectedFilePaths,\n      actualFilePaths,\n      'file paths match what was returned by readAllfilesRecursively'\n    );\n  });\n});\n\ndescribe('convertFilesToJavascript', () => {\n  beforeEach(() => mockfs({ [mockRoot]: {} }));\n  afterEach(() => mockfs.restore());\n\n  it('creates the file as expected', () => {\n    setUpNestedScenario(1, 3);\n    const specs = readAllFilesRecursively(mockRoot);\n    const outfile = `${mockRoot}/out.js`;\n    convertFilesToJavascript(specs, outfile);\n\n    const generatedFile = fs.readFileSync(outfile, 'ascii');\n    const generated = eval(`${generatedFile}\\nmodule.exports;`);\n\n    const allKeys = Object.keys(generated).sort();\n    assert.deepEqual(\n      allKeys,\n      ['dir-0/file-0.tst', 'dir-0/file-1.tst', 'dir-0/file-2.tst', 'file-0.tst', 'file-1.tst', 'file-2.tst'],\n      'generated module keys are as expected'\n    );\n\n    const data = fs.readFileSync(`${mockRoot}/dir-0/file-1.tst`, 'ascii');\n    assert.equal(generated['dir-0/file-1.tst'], data, 'data matches');\n  });\n});\n\nfunction flatten<T>(items: Array<T | Array<T>>): T[] {\n  const out: T[] = [];\n  items.forEach(item => {\n    if (Array.isArray(item)) {\n      out.push(...flatten(item));\n    } else {\n      out.push(item);\n    }\n  });\n  return out;\n}\n\nexport function sequence(n: number): number[] {\n  const out: number[] = [];\n  for (let i = 0; i < n; i++) {\n    out.push(i);\n  }\n  return out;\n}\n"]}